generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) @db.Uuid
  altUserId      Int       @unique @default(autoincrement())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           UserRole  @default(admin)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts    Account[]
  UserProfile UserProfile[]
  Events      Events[]
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Device {
  id                Int   @id @default(autoincrement())
  OS                String
  Kernel            String
  devicemodel       String
  OS_version        String
  Screen_resolution String
  Events            Events[]
}

model Events {
  id               Int   @id @default(autoincrement())
  userId           Int
  deviceId         Int
  user             User     @relation(fields: [userId], references: [altUserId], onDelete: Cascade)
  device           Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  nodename         String
  IPaddress        String
  isVPNSpoofed     Boolean
  isVirtualOS      Boolean
  isEmulator       Boolean
  isAppSpoofed     Boolean
  isAppPatched     Boolean
  isAppCloned      Boolean
  Latitude         Float
  Longitude        Float
  Cellular_network String
  Wifi_network     String
  createdAt        DateTime
  updatedAt        DateTime
}

model UserProfile {
  id           Int   @id @default(autoincrement())
  userId       Int
  email        String @unique
  firstName    String
  lastName     String
  organisation String
  phoneNumber  String
  address      String
  state        String
  zipcode      String
  country      String
  language     String
  user         User   @relation(fields: [userId], references: [altUserId], onDelete: Cascade)
}

model Stats {
  id          Int     @id @default(autoincrement())
  os          String?
  pieChart    Json?
  lineChart   Json?
  countryInfo Json?
}

enum UserRole {
  admin
  client
}
